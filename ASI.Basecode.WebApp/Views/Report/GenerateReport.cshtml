@model GenerateReportViewModel

@{
    ViewData["Title"] = "Generate Summary";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/style.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.16/jspdf.plugin.autotable.min.js"></script>

</head>
<body>
    <div class="g_container">
        <div class="filters row mb-4">

            <div class="filter text-left">
                <label for="start-date">Start Date:</label>
                <input type="date" id="start-date">
            </div>

            <div class="filter text-left">
                <label for="end-date">End Date:</label>
                <input type="date" id="end-date">
            </div>
            <div class="filter text-left">
                <label for="category-select">Select Category:</label>
                <select id="category-select">
                    <option value="">All Categories</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.CategoryID">@category.CategoryName</option>
                    }
                </select>
            </div>
            <div class="filter">
                <button id="apply-filters" class="btn-apply-filters" style="width: 150px;">Generate Report</button>
            </div>
            <div id="download-section" class="download-section ">
                <button id="download-icon" class="btn-download">
                    <i class="fas fa-download" ></i>
                </button>
                
                <div id="download-options" class="dropdown-menu" style="display: none; position: absolute; background-color: #fff;margin-left:80%;margin-top:10%; border: 1px solid #ddd; padding: 10px; top: 40px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);">
                    <button id="download-csv" class="dropdown-item">Download as CSV</button>
                    <button id="download-pdf" class="dropdown-item">Download as PDF</button>
                </div>
            </div>

        </div>

        <div class="g-rounded-container">
        <table id="expense-summary-table" class="expense">
            <thead>
                <tr class="text-left">
                    <th>Category</th>
                    <th>Title</th>
                    <th>Date</th>
                    <th>Description</th>
                    <th>Amount</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var expense in Model.Expenses)
                {
                    <tr>
                        <td>@expense.Category.CategoryName</td>
                        <td>@expense.Title</td>
                        <td>@expense.Date.ToString("yyyy-MM-dd")</td>
                        <td>@expense.Description</td>
                        <td>@expense.Amount</td>

                    </tr>
                }
            </tbody>
        </table>
        
        <div id="total-amount" class="total-amount text-right">
            <strong>Total Amount: </strong><span id="total-amount-value">
                @Model.Expenses.Sum(e => e.Amount).ToString("C")
            </span>
        </div>
        </div>
    </div>


    <script>
        document.getElementById("download-icon").addEventListener("click", function() {
            // Toggle the visibility of the dropdown options
            const downloadOptions = document.getElementById("download-options");
            downloadOptions.style.display = downloadOptions.style.display === "block" ? "none" : "block";
        });

        // Function to handle CSV download
        function downloadCSV() {
            const table = document.getElementById("expense-summary-table");
            if (!table) {
                alert("No table data available for download.");
                return;
            }

            const rows = Array.from(table.querySelectorAll("tr"));
            const csvContent = rows
                .map(row =>
                    Array.from(row.querySelectorAll("th, td"))
                        .map(cell => `"${cell.textContent}"`) 
                        .join(",")
                )
                .join("\n");

            const totalAmount = document.getElementById("total-amount-value").textContent.trim();
            const totalRow = `,,Total Amount,${totalAmount}`;
            const csvWithTotal = csvContent + "\n" + totalRow;

            const blob = new Blob([csvWithTotal], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = generateTitle("CSV");
            link.click();
        }

        // Function to handle PDF download
        function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.setFontSize(16);

            // Generate dynamic title based on filters
            const title = generateTitle("PDF");
            doc.text(title, 20, 20);

            const headers = ["Category", "Title", "Date", "Description", "Amount"];
            const rows = [];
            const table = document.getElementById("expense-summary-table");
            const tableRows = table.querySelectorAll("tbody tr");

            tableRows.forEach(row => {
                const columns = row.querySelectorAll("td");
                const rowData = Array.from(columns).map(col => col.textContent);
                rows.push(rowData);
            });

            doc.autoTable({
                head: [headers],
                body: rows,
                startY: 30,
            });

            const totalAmount = document.getElementById("total-amount-value").textContent.trim();
            doc.setFontSize(12);
            doc.text(`Total Amount: ${totalAmount}`, 20, doc.lastAutoTable.finalY + 10);

            doc.save("Expense_Summary_Report.pdf");
        }

        function setupDownloadButton() {
            const buttonCSV = document.getElementById("download-csv");
            if (buttonCSV) {
                buttonCSV.addEventListener("click", function() {
                    downloadCSV();  
                    document.getElementById("download-options").style.display = "none"; 
                });
            }

            const buttonPDF = document.getElementById("download-pdf");
            if (buttonPDF) {
                buttonPDF.addEventListener("click", function() {
                    downloadPDF();  
                    document.getElementById("download-options").style.display = "none"; 
                });
            }
        }

        function generateTitle(type) {
            const categoryFilter = document.getElementById("category-select").value;
            const startDate = document.getElementById("start-date").value;
            const endDate = document.getElementById("end-date").value;

            let title = "";

            if (!categoryFilter && !startDate && !endDate) {
                title = "Overall Expense Report"; // No filters applied
            } else if (categoryFilter && !startDate && !endDate) {
                const categoryName = document.querySelector(`#category-select option[value="${categoryFilter}"]`).textContent;
                title = `${categoryName} Expense Summary Report`;
            } else if (!categoryFilter && startDate && endDate) {
                title = `Expense Summary Report \nDate: ${startDate} to ${endDate}`;
            } else if (categoryFilter && startDate && endDate) {
                const categoryName = document.querySelector(`#category-select option[value="${categoryFilter}"]`).textContent;
                title = `${categoryName} Expense Summary Report \nDate: ${startDate} to ${endDate}`;
            }

            // Adjust title for CSV or PDF context
            if (type === "CSV") {
                title = `${title} (CSV Format)`;
            }

            return title;
        }

        window.onload = setupDownloadButton;

        function initializeGenerateReportScripts() {
            function applyFilters() {
                const categoryFilter = document.getElementById("category-select").value;
                const startDate = document.getElementById("start-date").value;
                const endDate = document.getElementById("end-date").value;

                // Get the raw data from the model
                const rawExpenses = @Html.Raw(Json.Serialize(Model.Expenses.Select(e => new
            {
                e.ExpenseID,
                e.Title,
                e.Amount,
                e.Date,
                e.Description,
                e.CategoryID,
                CategoryName = e.Category != null ? e.Category.CategoryName : "No Category"
            })));
                console.log(rawExpenses); 

                // Normalize the date to ensure proper comparisons
                function parseDate(dateStr) {
                    const date = new Date(dateStr);
                    date.setHours(0, 0, 0, 0); 
                    return date;
                }

                // Filter the expenses based on the selected filters
                const filteredExpenses = rawExpenses.filter(expense => {
                    const expenseDate = parseDate(expense.date);
                    const isCategoryMatch = categoryFilter ? parseInt(categoryFilter) === expense.categoryID : true;

                    // Parse start and end dates
                    const parsedStartDate = startDate ? parseDate(startDate) : null;
                    const parsedEndDate = endDate ? parseDate(endDate) : null;

                    // Ensure expense date is within the selected range (from start date to end date)
                    const isStartDateMatch = parsedStartDate ? expenseDate >= parsedStartDate : true;
                    const isEndDateMatch = parsedEndDate ? expenseDate <= parsedEndDate : true;

                    // Apply all conditions (category match, start date match, end date match)
                    return isCategoryMatch && isStartDateMatch && isEndDateMatch;
                });

                // Update table and total amount
                const tbody = document.querySelector("#expense-summary-table tbody");
                tbody.innerHTML = "";
                let totalAmount = 0;

                filteredExpenses.forEach(expense => {
                    const row = document.createElement("tr");

                    // Use the categoryName directly from the raw data
                    const categoryName = expense.CategoryName || "No Category";  // Ensure the categoryName is used

                    // Format the date explicitly if valid
                    const expenseDate = new Date(expense.date);
                    const formattedDate = !isNaN(expenseDate.getTime()) ? expenseDate.toLocaleDateString('en-US') : "Invalid Date";

                    row.innerHTML = `
                        <td>${expense.categoryName}</td>
                        <td>${expense.title}</td>
                        <td>${formattedDate}</td>
                        <td>${expense.description}</td>
                        <td>${expense.amount}</td>
                    `;
                    tbody.appendChild(row);
                    totalAmount += expense.amount;
                });

                // Update total amount
                document.getElementById("total-amount-value").textContent = totalAmount.toFixed(2);
            }

            // Add event listener to apply filters button
            document.getElementById("apply-filters").addEventListener("click", applyFilters);
        }

        document.addEventListener("DOMContentLoaded", function () {
            initializeGenerateReportScripts();
            setupDownloadButton(); 
        });

        // Reinitialize the download button 
        $(document).ajaxComplete(function () {
            setupDownloadButton();
        });

    </script>


</body>
</html>